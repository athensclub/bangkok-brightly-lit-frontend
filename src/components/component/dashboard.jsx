/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/rjeaV6Ng1iP
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Bricolage_Grotesque } from 'next/font/google'

bricolage_grotesque({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  PopoverTrigger,
  PopoverContent,
  Popover,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  CardDescription,
  CardTitle,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { AlertTitle, AlertDescription, Alert } from "@/components/ui/alert";
import { ResponsiveLine } from "@nivo/line";
import { useEffect, useState } from "react";
import { getAlert, getCurrentStatus, getSpecifyStatus } from "@/lib/api";

function MapPinIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
      <circle cx="12" cy="10" r="3" />
    </svg>
  );
}

function Loading(props) {   
  return (     
    <div className={"flex " + (props.centered ? "absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%]" : "")}>       
      <div className="flex items-center space-x-2 animate-pulse">         
        <div className="w-3 h-3 bg-gray-500 rounded-full dark:bg-gray-400" />         
         <div className="w-3 h-3 bg-gray-500 rounded-full dark:bg-gray-400" />         
      <div className="w-3 h-3 bg-gray-500 rounded-full dark:bg-gray-400" />       
    </div>     
  </div>   
  )
} 

function LineChart(props) {
  const [status, setStatus] = useState([]);
  const [alert, setAlert] = useState();

  useEffect(() => {
    getSpecifyStatus(new Date()).then((prop) => {
      setStatus(prop);
    });
  }, []);

  return (
    <div {...props}>
      {status.length===0?<Loading centered></Loading>:<ResponsiveLine
        data={[
          {
            id: "Mobile",
            data: status.map(item => ({ x: `${new Date(item.timestamp).getHours().toString().padStart(2,"0")}:${new Date(item.timestamp).getMinutes().toString().padStart(2,"0")}`, y: item[props.keyname] })),
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#177fcb"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          text: {
            fill: "#ffffff",
          },
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />}
      
    </div>
  );
}

export function Dashboard() {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [current, setCurrent] = useState(null);
  const [alert, setAlert] = useState(null);
  

  useEffect(() => {
    setInterval(() => {
      getCurrentStatus()
        .then((prop) => {
          setCurrent(prop);
          console.log(prop);
        })
      getAlert()
        .then((prop) => {
          setAlert(prop);
          // console.log(prop);
        })
    }, 5000)
  }, [])

  return (
    <div className="grid min-h-screen w-full">
      <div className="flex flex-col">
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <div className="flex items-center gap-4">
            <h1 className="font-semibold text-lg md:text-xl flex flex-row items-center gap-2">
              <LightbulbIcon className="h-6 w-6 text-white" /> Bangkok Lighting
              Dashboard
            </h1>
            <div className="ml-auto flex items-center gap-2">
              <Button
                onClick={() => setSelectedDate(new Date())}
                className="hidden sm:flex"
                variant="outline"
              >
                Today
              </Button>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    className="w-[280px] justify-start text-left font-normal"
                    id="date"
                    variant="outline"
                  >
                    <CalendarClockIcon className="mr-2 h-4 w-4" />
                    {formatDate(selectedDate)}
                  </Button>
                </PopoverTrigger>
                <PopoverContent align="end" className="w-auto p-0">
                  <Calendar
                    mode="single"
                    setSelected={setSelectedDate}
                    selected={selectedDate}
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
          <div className="grid gap-6">
            <Card className="flex flex-col">
              <CardHeader className="bg-gray-800">
                <div className="flex flex-row justify-around">
                  <div className="flex flex-col">
                    <CardDescription>Location Details</CardDescription>
                    <CardTitle>Siam Square</CardTitle>
                  </div>
                  <div className="flex items-center gap-2">
                    <LightbulbIcon className="h-5 w-5 text-yellow-500" />
                    <div className="relative">
                      <div className="font-semibold">Lighting Level</div>
                      {current===null? <Loading></Loading>:
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {current.light}
                        </div>
                      }
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <MoveIcon className="h-5 w-5 text-green-500" />
                    <div className="relative">
                      <div className="font-semibold">Motion Activity</div>
                      {current===null? <Loading></Loading>:
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {current.pir}
                        </div> 
                      }
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <ClockIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                    <div>
                      <div className="font-semibold">Last Updated</div>
                      {current===null?<Loading></Loading>:
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          5 seconds ago
                        </div>
                      }
                    </div>
                  </div>
                </div>
              </CardHeader>
            </Card>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card className="flex flex-col fit relative">
                <CardHeader className="bg-slate-700">
                  <CardDescription>Light Levels</CardDescription>
                  <CardTitle>High</CardTitle>
                  <LineChart className="aspect-[4/3]" keyname="light" />
                </CardHeader>
              </Card>
              <Card className="flex flex-col relative">
                <CardHeader className="bg-slate-700">
                  <CardDescription>Movement Activity</CardDescription>
                  <CardTitle>Moderate</CardTitle>
                  <LineChart className="aspect-[4/3]" keyname = "pir" />
                </CardHeader>
              </Card>
              <Card className="flex flex-col">
                <CardHeader className="bg-red-500">
                  <CardDescription className="text-[#edf2f4]">
                    Alerts
                  </CardDescription>
                  {alert!==null?
                    (alert.alertLight?
                      alert.alertPir?
                      <CardTitle>2</CardTitle>:
                      <CardTitle>1</CardTitle>
                      :alert.alertPir?
                      <CardTitle>1</CardTitle>:
                      <CardTitle>0</CardTitle>):
                      <Loading></Loading>
                  }
                  
                </CardHeader>
                <CardContent className="bg-slate-700">
                {alert===null? <Loading></Loading>:
                  <div className="grid gap-4 bg-slate-700">
                  {alert.alertLight?
                    <Alert className="mt-10">
                      <AlertTitle>High Light Levels</AlertTitle>
                      <AlertDescription>
                        Elevated light levels detected in the Sukhumvit
                        district.
                      </AlertDescription>
                    </Alert>:
                    <div></div>
                  }
                  {alert.alertPir?
                    <Alert className="mt-10">
                      <AlertTitle>Increased Movement</AlertTitle>
                      <AlertDescription>
                        Unusual movement activity reported in the Chinatown
                        area.
                      </AlertDescription>
                    </Alert>: <div></div>
                  }
                </div>
                }
                </CardContent>
              </Card>
            </div>
            <div className="grid md:grid-cols-2 gap-6"></div>
          </div>
        </main>
      </div>
    </div>
  );
}

function formatDate(date) {
  const formattedDate = {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  };

  return date.toLocaleDateString("en-US", formattedDate);
}

function BellIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
      <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
    </svg>
  );
}

function CalendarClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5" />
      <path d="M16 2v4" />
      <path d="M8 2v4" />
      <path d="M3 10h5" />
      <path d="M17.5 17.5 16 16.3V14" />
      <circle cx="16" cy="16" r="6" />
    </svg>
  );
}

function ClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function LightbulbIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5" />
      <path d="M9 18h6" />
      <path d="M10 22h4" />
    </svg>
  );
}

function LineChartIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 3v18h18" />
      <path d="m19 9-5 5-4-4-3 3" />
    </svg>
  );
}

function MapIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z" />
      <path d="M15 5.764v15" />
      <path d="M9 3.236v15" />
    </svg>
  );
}

function MoveIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="5 9 2 12 5 15" />
      <polyline points="9 5 12 2 15 5" />
      <polyline points="15 19 12 22 9 19" />
      <polyline points="19 9 22 12 19 15" />
      <line x1="2" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="22" />
    </svg>
  );
}

function Package2Icon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" />
      <path d="m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" />
      <path d="M12 3v6" />
    </svg>
  );
}

function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}

function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  );
}
